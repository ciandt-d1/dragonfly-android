buildscript {
    repositories {
        jcenter()
        maven { url "https://maven.fabric.io/public" }
    }

    dependencies {
        classpath 'io.fabric.tools:gradle:1.22.1'
    }
}

repositories {
    jcenter()
    maven { url 'https://maven.fabric.io/public' }
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: "kotlin-noarg"
apply plugin: 'io.fabric'

apply from: '../versions.gradle'
apply from: '../sonarqube.gradle'
apply from: '../quality.gradle'

ext {
    // The order is based on way the Play store works with multiple APKs. Remember, if a user's
    // device is compatible with more than one APK for an application, the device will receive the
    // version with the highest version code. This is why an armeabi build will be given a prefix
    // of 1 as this build will also be able to run a armeabi-v7a device (2) and in some cases a x86
    // device (8) due to a proprietary ARM translation layer called libhoudini.
    archsCodes = ['armeabi': 1, 'armeabi-v7a': 2, 'arm64-v8a': 3, 'mips': 5, 'mips64': 6, 'x86': 8, 'x86_64': 9]

    appVersionArchsMultiplier = 10000000
    appVersionMajorMultiplier = 10000
    appVersionMinorMultiplier = 100
    appVersionPatchMultiplier = 1

    SONAR_PROJECT_NAME = "Dragonfly Android Example App"
    SONAR_PROJECT_KEY = "DragonflyAndroidExampleApp"
    SONAR_BINARIES = "/intermediates/classes/prdDragonfly/debug"
    SONAR_JAVA_BINARIES = "${project.buildDir}/intermediates/classes/prdDragonfly/debug"
    SONAR_JAVA_TEST_BINARIES = "${project.buildDir}/intermediates/classes/prdDragonfly/debug"
}

def keystoreProperties = new Properties()
def keystorePropertiesFile = rootProject.file(".configs/keystore.properties")
keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

def fabricProperties = new Properties()
def fabricPropertiesFile = rootProject.file(".configs/fabric.properties")
fabricProperties.load(new FileInputStream(fabricPropertiesFile))

android {
    compileSdkVersion 25
    buildToolsVersion "25.0.3"

    defaultConfig {
        applicationId "com.ciandt.dragonfly.example"

        minSdkVersion 19
        targetSdkVersion 25

        versionName "${appVersionMajor}.${appVersionMinor}.${appVersionPatch}"
        versionCode appVersionMajor * appVersionMajorMultiplier + appVersionMinor * appVersionMinorMultiplier + appVersionPatch * appVersionPatchMultiplier

        resValue "string", "app_name", "Dragonfly"

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        resConfigs "en"

        buildConfigField 'int', 'LOG_LEVEL', '4' // DragonflyLogger.LOG_LEVEL_DEBUG = 4;

        buildConfigField 'String', 'TENANT', '"ciandt"'

        manifestPlaceholders = [
                FABRIC_API_KEY: fabricProperties['apiKey']
        ]
    }

    signingConfigs {
        release {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile file(keystoreProperties['storeFile'])
            storePassword keystoreProperties['storePassword']
        }
    }

    buildTypes {
        release {
            debuggable false
            minifyEnabled false
            zipAlignEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }

        debug {
            debuggable true
            minifyEnabled false
            zipAlignEnabled false
            signingConfig signingConfigs.release
        }
    }

    flavorDimensions "environment", "tenant"

    productFlavors {
        dragonfly {
            dimension "tenant"
        }

        dev {
            dimension "environment"

            applicationId "com.ciandt.dragonfly.example.dev"
        }

        prd {
            dimension "environment"
        }
    }

    splits {
        // Configures multiple APKs based on ABI.
        abi {
            // Enables building multiple APKs per ABI.
            enable true

            // By default all ABIs are included, so use reset() and include to specify.
            // Resets the list of ABIs that Gradle should create APKs for to none.
            reset()

            // Specifies a list of ABIs that Gradle should create APKs for.
            include "arm64-v8a", "armeabi-v7a", "x86", "x86_64"

            // Also generate a universal APK that includes all ABIs.
            universalApk true
        }
    }
}

dependencies {

    compile fileTree(dir: 'libs', include: ['*.jar'])

    compile "org.jetbrains.kotlin:kotlin-stdlib-jre7:${kotlin_version}"

    def supportLibraryVersion = '25.4.0'
    compile "com.android.support:appcompat-v7:${supportLibraryVersion}"
    compile "com.android.support:cardview-v7:${supportLibraryVersion}"
    compile "com.android.support:recyclerview-v7:${supportLibraryVersion}"
    compile "com.android.support:animated-vector-drawable:${supportLibraryVersion}"
    compile "com.android.support:design:${supportLibraryVersion}"


    def debugDrawerVersion = '0.7.0'
    debugCompile "io.palaima.debugdrawer:debugdrawer:${debugDrawerVersion}"
    releaseCompile "io.palaima.debugdrawer:debugdrawer-no-op:${debugDrawerVersion}"
    debugCompile "io.palaima.debugdrawer:debugdrawer-view:${debugDrawerVersion}"
    releaseCompile "io.palaima.debugdrawer:debugdrawer-view-no-op:${debugDrawerVersion}"
    compile "io.palaima.debugdrawer:debugdrawer-commons:${debugDrawerVersion}"
    compile "io.palaima.debugdrawer:debugdrawer-actions:${debugDrawerVersion}"
    compile "io.palaima.debugdrawer:debugdrawer-okhttp3:${debugDrawerVersion}"
    compile "io.palaima.debugdrawer:debugdrawer-glide:${debugDrawerVersion}"

    def leakCanaryVersion = '1.5.1'
    debugCompile "com.squareup.leakcanary:leakcanary-android:${leakCanaryVersion}"
    releaseCompile "com.squareup.leakcanary:leakcanary-android-no-op:${leakCanaryVersion}"
    testCompile "com.squareup.leakcanary:leakcanary-android-no-op:${leakCanaryVersion}"

    def firebaseVersion = '11.0.1'
    compile "com.google.firebase:firebase-core:${firebaseVersion}"
    compile "com.google.firebase:firebase-auth:${firebaseVersion}"
    compile "com.google.firebase:firebase-storage:${firebaseVersion}"
    compile "com.google.firebase:firebase-database:${firebaseVersion}"
    compile "com.google.android.gms:play-services-auth:${firebaseVersion}"

    compile 'com.facebook.stetho:stetho:1.5.0'

    // Log
    compile('com.crashlytics.sdk.android:crashlytics:2.6.8@aar') {
        transitive = true
    }

    // UI
    compile 'uk.co.chrisjenx:calligraphy:2.3.0'

    // Helpers
    compile 'com.karumi:dexter:4.1.0'

    // Dragonfly Library
    compile project(":library")

    // Tests
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })

    testCompile 'junit:junit:4.12'
    testCompile "org.jetbrains.kotlin:kotlin-test-junit:${kotlin_version}"
    testCompile 'org.amshove.kluent:kluent:1.20'
    testCompile "org.mockito:mockito-core:2.7.13"
    testCompile 'org.robolectric:robolectric:3.1.1'
}

// - google-services.json
task copyGoogleServicesJson(type: Copy) {
    from "../.configs/google-services"
    into "src"

    doLast {
        tasks.each { task ->
            def matches
            if ((matches = task.name =~ /process(.+?)(Debug|Release)GoogleServices/)) {
                def flavor = matches.group(1).uncapitalize()

                task.quickstartFile = project.file("./src/${flavor}/google-services.json")
            }
        }
    }
}

tasks.whenTaskAdded { task ->
    if (task.name ==~ /process.*GoogleServices/) {
        task.dependsOn copyGoogleServicesJson
    }
}


apply plugin: 'com.google.gms.google-services'

/**
 * Fix versionName and applicationId attributes of the variant.
 * For the default flavor, the only thing done is to add the environment as suffix, if it's not prd.
 * For example:
 * - 2.0.2.dev
 * If the environment is prd, nothing changes. For example:
 * - 2.0.2
 *
 * For other flavors, the following is done:
 * - If the environment is prd, only the tenant name is appended to the versionName. For example:
 * -- 2.0.2.tenant
 *
 * - If the environment is any other than prd, then both the tenant and the environment are appended.
 * For example:
 * -- 2.0.2.tenant.dev
 *
 * This also add a suffix " (<ENVIRONMENT_NAME>)" to the app name if it points to the development environment.
 */
android.applicationVariants.all { variant ->
    def tenant = variant.getProductFlavors().get(1).name
    if (tenant != 'dragonfly') {
        variant.mergedFlavor.versionName += '.' + tenant

        variant.mergedFlavor.applicationId += '.' + tenant
    }

    def environment = variant.getProductFlavors().get(0).name
    if (environment != 'prd') {
        variant.mergedFlavor.versionName += '.' + environment

        def appName = variant.mergedFlavor.resValues.get('app_name').getValue()
        variant.resValue 'string', 'app_name', sprintf('%1$s (%2$s)', [appName, environment.toUpperCase()])
    }
}

android.applicationVariants.all { variant ->
    // Assigns a different version code for each output APK other than the universal APK.
    variant.outputs.each { output ->

        // Stores the value of ext.archsCodes that is associated with the ABI for this variant.
        // Determines the ABI for this variant and returns the mapped value.
        def archCode = output.getFilter(com.android.build.OutputFile.ABI)
        def archVersionCode = project.ext.archsCodes.get(archCode) ?: 0

        // Assigns the new version code to versionCodeOverride, which changes the version code
        // for only the output APK, not for the variant itself. Skipping this step simply
        // causes Gradle to use the value of variant.versionCode for the APK.
        output.versionCodeOverride = archVersionCode * appVersionArchsMultiplier + variant.versionCode

        // Change filename of apk file
        def version = variant.versionName.replace(".", "-") + "-" + archVersionCode
        def file = output.outputFile
        output.outputFile = new File(file.parent, file.name.replace("app-", "app-" + version + "-"))

        // If universal, set APK path for Fabric Beta
        if (archVersionCode == 0) {
            tasks.findAll {
                it.name.startsWith("crashlyticsUploadDistribution${variant.name.capitalize()}")
            }.each {
                it.doFirst {
                    ext.betaDistributionApkFilePath = output.outputFile.absolutePath
                    ext.betaDistributionGroupAliases = "dragonfly-testers"
                }
            }

        }
    }
}

task setupFabric(type: Exec) {
    commandLine 'sh', './scripts/setup_fabric.sh'
}

task setupCrashlytics(type: Exec) {
    commandLine 'sh', './scripts/setup_crashlytics.sh'
}

preBuild.dependsOn(setupFabric, setupCrashlytics)

// Kotlin Support
// - Unit tests
task copyTestClasses(type: Copy) {
    from "build/tmp/kotlin-classes/debugUnitTest"
    into "build/intermediates/classes/debug"
}

// - Instrumented test
task copySdkClasses(type: Copy) {
    from "build/tmp/kotlin-classes/debug"
    into "build/intermediates/classes/debug"
}

afterEvaluate {
    compileDevDragonflyDebugUnitTestSources.dependsOn copyTestClasses
    compileDevDragonflyDebugAndroidTestSources.dependsOn copySdkClasses
}